var isNumeric=function(a){return"undefined"==typeof a?void 0:!Array.isArray(a)&&!isNaN(parseFloat(a))&&isFinite(a)},sumExact=function(a){var b=Math.abs;if(0==a.length)return;if(1==a.length)return a[0];let c=a[0],d=0,e=0;for(let f=1;f<a.length;f++){let g=a[f],h=c+g;if(-1<(g+"").indexOf(".")){let a=(g+"").split(".")[1].length;e=a>e?a:e}d+=b(c)>=b(g)?c-h+g:g-h+c,c=h}let f=Math.pow(10,e+1);return Math.round((c+d)*f)/f};class Vector{constructor(...a){let b=0;a.forEach(function(a){if(isNumeric(a)){let c=Vector.getDimensionLabel(b);this[c]=parseFloat(a),b++}else null!==a&&"object"==typeof a&&this.parseSettings(a)},this),this.x=this.x||0,this.y=this.y||0}parseSettings(a){if(a.dimension&&this.dimension<a.dimension)for(let b,c=this.dimension;c<a.dimension;c++)b=Vector.getDimensionLabel(c),this[b]=0}static getDimensionLabel(a){let b=Array(26).fill("").map((a,b)=>String.fromCharCode(97+b)),c=b.slice(-3).concat(b.slice(0,-3));return 25>=a?c[a]:b[Math.floor(a/25)-1]+b[a%25]}static getAngleLabel(a){let b=["alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigma","tau","upsilon","phi","chi","psi","omega"];return 23>=a?b[a]:b[Math.floor(a/23)-1]+b[a%23]}static sameDimension(a,...b){return 0==b.filter(b=>b.dimension!==a.dimension).length}static add(...a){if(Vector.sameDimension(...a)){let b=Array(a[0].dimension).fill(null).map((b,c)=>a.reduce((a,b)=>a+b[Vector.getDimensionLabel(c)],0));return new Vector(...b)}}static addExact(...a){if(Vector.sameDimension(...a)){let b=Array(a[0].dimension).fill(null).map((b,c)=>sumExact(a.map(a=>a[Vector.getDimensionLabel(c)])));return new Vector(...b)}}static subtract(a,...b){if(Vector.sameDimension(a,...b)){let c=Array(a.dimension).fill(null).map((c,d)=>b.reduce((a,b)=>a-b[Vector.getDimensionLabel(d)],a[Vector.getDimensionLabel(d)]));return new Vector(...c)}}static subtractExact(...a){if(Vector.sameDimension(...a)){let b=Array(a[0].dimension).fill(null).map((b,c)=>sumExact(a.map((a,b)=>0==b?a[Vector.getDimensionLabel(c)]:-a[Vector.getDimensionLabel(c)])));return new Vector(...b)}}static mult(a,b){let c=Array(a.dimension).fill(null).map((c,d)=>a[Vector.getDimensionLabel(d)]*b);return new Vector(...c)}static div(a,b){if(0!=b){let c=Array(a.dimension).fill(null).map((c,d)=>a[Vector.getDimensionLabel(d)]/b);return new Vector(...c)}}static negative(a){return Vector.mult(a,-1)}static dot(a,b){return Vector.sameDimension(a,b)?Array(a.dimension).fill(null).map((c,d)=>a[Vector.getDimensionLabel(d)]*b[Vector.getDimensionLabel(d)]).reduce((a,b)=>a+b,0):void 0}static length(a){return Math.sqrt(Vector.dot(a,a))}static normalise(a){return Vector.div(a,Vector.length(a))}static setLength(a,b){return Vector.mult(Vector.normalise(a),b)}static limit(a,b){let c=Vector.length(a);return c<=b?a:Vector.mult(Vector.normalise(a),b)}static min(a,b){if(Vector.sameDimension(a,b)){let c=Array(vector.dimension).fill(null).map((c,d)=>Math.min(a[Vector.getDimensionLabel(d)],b[Vector.getDimensionLabel(d)]));return new Vector(...c)}}static min(a,b){if(Vector.sameDimension(a,b)){let c=Array(vector.dimension).fill(null).map((c,d)=>Math.max(a[Vector.getDimensionLabel(d)],b[Vector.getDimensionLabel(d)]));return new Vector(...c)}}static lerp(a,b,c){if(Vector.sameDimension(a,b)){let d=Object.assign({},...b);return Object.setPrototypeOf(d,Vector),d.subtract(a).multiply(c).add(a)}}static map(a,b,c,d,e){if(Vector.sameDimension(a,b,c,d,e)){let f=Array(a.dimension).fill(null).map((f,g)=>{let h=Vector.getDimensionLabel(g);return d[h]+(a[h]-b[h])*(e[h]-d[h])/(c[h]-b[h])});return new Vector(...f)}}get dimension(){return Object.keys(this).length}update(a){for(let b in this)a.hasOwnProperty(b)&&(this[b]=a[b]);return this}add(...a){return a.forEach(a=>this.update(Vector.add(this,a))),this}addExact(...a){return a.forEach(a=>this.update(Vector.addExact(this,a))),this}subtract(...a){return a.forEach(a=>this.update(Vector.subtract(this,a))),this}subtractExact(...a){return a.forEach(a=>this.update(Vector.subtractExact(this,a))),this}mult(a){return this.update(Vector.mult(this,a))}div(a){return this.update(Vector.div(this,a))}negative(){return this.update(Vector.negative(this))}dot(a){return Vector.dot(this,a)}length(){return Vector.length(this)}normalise(){return this.update(Vector.normalise(this))}setLength(a){return this.update(Vector.setLength(this,a))}limit(a){return this.update(Vector.limit(this,a))}min(a){return this.update(Vector.min(this,a))}min(a){return this.update(Vector.max(this,a))}lerp(a,b,c){return this.update(Vector.lerp(a,b,c))}map(a,b,c,d){return this.update(Vector.map(this,a,b,c,d))}}"undefined"==typeof exports?window.Vector=Vector:("undefined"!=typeof module&&module.exports&&(exports=module.exports=Vector),exports.Vector=Vector);